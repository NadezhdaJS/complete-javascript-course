'use strict';
/* const bookings = [];

const createBooking = function (
  flightNum,
  numPassengers = 1, //–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  price = 199 * numPassengers
) {
  // ES5
  // numPassengers = numPassengers || 1;
  // price = price || 199;

  const booking = {
    flightNum,
    numPassengers,
    price,
  };
  console.log(booking);
  bookings.push(booking);
};

createBooking('LH123');
createBooking('LH123', 2, 800);
createBooking('LH123', 2);
createBooking('LH123', 5);

createBooking('LH123', undefined, 1000); //–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, —Å—Ç–∞–≤–∏–º –µ–º—É undefined */

///////////////////////////////////////
// How Passing Arguments Works: Values vs. Reference
/* const flight = 'LH234';
const jonas = {
  name: 'Jonas Schmedtmann',
  passport: 24739479284,
};

const checkIn = function (flightNum, passenger) {
  flightNum = 'LH999';
  passenger.name = 'Mr. ' + passenger.name;

  if (passenger.passport === 24739479284) {
    //alert('Checked in');
  } else {
    //alert('Wrong passport!');
  }
};

// checkIn(flight, jonas);
// console.log(flight);
// console.log(jonas);

// Is the same as doing...
// const flightNum = flight;
// const passenger = jonas;

const newPassport = function (person) {
  person.passport = Math.trunc(Math.random() * 100000000000);
}; //–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—è–µ—Ç —Å–∞–º –æ–±—ä–µ–∫—Ç –≤—ã—à–µ. –¢–æ –∂–µ –∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏

newPassport(jonas);
checkIn(flight, jonas);

///////////////////////////////////////
// Functions Accepting Callback Functions
const oneWord = function (str) {
  return str.replace(/ /g, '').toLowerCase();
};

const upperFirstWord = function (str) {
  const [first, ...others] = str.split(' ');
  return [first.toUpperCase(), ...others].join(' ');
};

// Higher-order function
const transformer = function (str, fn) {
  console.log(`Original string: ${str}`);
  console.log(`Transformed string: ${fn(str)}`);

  console.log(`Transformed by: ${fn.name}`);
};

transformer('JavaScript is the best!', upperFirstWord);
transformer('JavaScript is the best!', oneWord);

// JS uses callbacks all the time
const high5 = function () {
  console.log('üëã');
};
document.body.addEventListener('click', high5);
['Jonas', 'Martha', 'Adam'].forEach(high5);

///////////////////////////////////////
// Functions Returning Functions
const greet = function (greeting) {
  return function (name) {
    console.log(`${greeting} ${name}`);
  };
};

const greeterHey = greet('Hey');
greeterHey('Jonas');
greeterHey('Steven');

greet('Hello')('Jonas');

// Challenge
const greetArr = greeting => name => console.log(`${greeting} ${name}`);

greetArr('Hi')('Jonas');

///////////////////////////////////////
// The call and apply Methods
const lufthansa = {
  airline: 'Lufthansa',
  iataCode: 'LH',
  bookings: [],
  // book: function() {}
  book(flightNum, name) {
    console.log(
      `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
    );
    this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name }); //this –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç –≤—ã—à–µ
  },
};

lufthansa.book(239, 'Jonas Schmedtmann');
lufthansa.book(635, 'John Smith');

const eurowings = {
  airline: 'Eurowings',
  iataCode: 'EW',
  bookings: [],
};

const book = lufthansa.book;

// Does NOT work –∏–∑-–∑–∞ this
// book(23, 'Sarah Williams');

// Call method
book.call(eurowings, 23, 'Sarah Williams');
console.log(eurowings);

book.call(lufthansa, 239, 'Mary Cooper');
console.log(lufthansa);

const swiss = {
  airline: 'Swiss Air Lines',
  iataCode: 'LX',
  bookings: [],
};

book.call(swiss, 583, 'Mary Cooper');

// Apply method - —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç
const flightData = [583, 'George Cooper'];
book.apply(swiss, flightData);
console.log(swiss);

book.call(swiss, ...flightData); //—Ç–∞–∫ –¥–µ–ª–∞—é—Ç –∏–ª–∏ –Ω–∏–∂–µ

///////////////////////////////////////
// The bind Method
// book.call(eurowings, 23, 'Sarah Williams'); //—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

const bookEW = book.bind(eurowings);
const bookLH = book.bind(lufthansa);
const bookLX = book.bind(swiss);

bookEW(23, 'Steven Williams');

const bookEW23 = book.bind(eurowings, 23); //–ó–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –º–æ–∂–Ω–æ –∏–º–µ–Ω–∞ —Ä–∞–∑–Ω—ã–µ –±—Ä–∞—Ç—å –Ω–∏–∂–µ
bookEW23('Jonas Schmedtmann');
bookEW23('Martha Cooper');

// With Event Listeners
lufthansa.planes = 300;
lufthansa.buyPlane = function () {
  console.log(this); //–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∞, –∞ –Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ

  this.planes++;
  console.log(this.planes);
};
// lufthansa.buyPlane();

document
  .querySelector('.buy')
  .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));

// Partial application
const addTax = (rate, value) => value + value * rate;
console.log(addTax(0.1, 200));

const addVAT = addTax.bind(null, 0.23); //–∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–π rate. –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
// addVAT = value => value + value * 0.23;

console.log(addVAT(100));
console.log(addVAT(23));

const addTaxRate = function (rate) {
  return function (value) {
    return value + value * rate;
  };
};
const addVAT2 = addTaxRate(0.23);
console.log(addVAT2(100));
console.log(addVAT2(23));

// Immediately Invoked Function Expressions (IIFE)  –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑
const runOnce = function () {
  console.log('This will never run again');
};
runOnce(); //–û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

// IIFE
(function () {
  console.log('This will never run again');
  const isPrivate = 23;
})();

// console.log(isPrivate); –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

(() => console.log('This will ALSO never run again'))();

{
  const isPrivate = 23; // –§–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∑–∞—â–∏—â–∞—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ—Ç –∏—Å–ø–æ–ª—å–æ–∑–≤–∞–Ω–∏—è –≥–¥–µ-–ª–∏–±–æ –µ—â–µ —Å–Ω–∞—Ä—É–∂–∏ –±–ª–æ–∫–∞. –¢–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ü–µ–ª—è—Ö –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  var notPrivate = 46; // var –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–∫–æ–±–∫–∏ –∏ –µ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–∞—Ä—É–∂–∏, –ø–æ—ç—Ç–æ–º—É var —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç
}
// console.log(isPrivate);
console.log(notPrivate);

///////////////////////////////////////
// Closures
const secureBooking = function () {
  let passengerCount = 0;

  return function () {
    passengerCount++;
    console.log(`${passengerCount} passengers`);
  };
};

const booker = secureBooking();

booker();
booker();
booker();

console.dir(booker);

///////////////////////////////////////
// More Closure Examples
// Example 1
let f;

const g = function () {
  const a = 23;
  f = function () {
    console.log(a * 2);
  };
};

const h = function () {
  const b = 777;
  f = function () {
    console.log(b * 2);
  };
};

g();
f();
console.dir(f);

// Re-assigning f function
h();
f();
console.dir(f);

// Example 2
const boardPassengers = function (n, wait) {
  const perGroup = n / 3;

  setTimeout(function () {
    console.log(`We are now boarding all ${n} passengers`);
    console.log(`There are 3 groups, each with ${perGroup} passengers`);
  }, wait * 1000);

  console.log(`Will start boarding in ${wait} seconds`);
};

const perGroup = 1000;
boardPassengers(180, 3); */

(function () {
  const header = document.querySelector('h1');
  header.style.color = 'red';
  document.querySelector('body').addEventListener('click', function () {
    header.style.color = 'blue';
  });
})();
